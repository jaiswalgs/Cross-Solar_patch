From 7dc039aab34e0c4282bceced24f7ceaf5e9d36ba Mon Sep 17 00:00:00 2001
From: gaurishanker <jaiswal.gaurishanker@gmail.com>
Date: Sun, 5 Aug 2018 02:02:03 +0400
Subject: [PATCH] My submission
XOV: XO_0_0_1

---
 .gitignore                                         |   1 +
 gradlew                                            |   0
 .../techtrial/bootstrap/AppConfiguration.java      |  32 +++
 .../techtrial/controller/PanelController.java      |  63 ++++--
 .../converter/DailyElectricitiesConverter.java     |  53 +++++
 .../crossover/techtrial/dto/DailyElectricity.java  |  52 +----
 .../exceptions/GlobalExceptionHandler.java         |   0
 .../techtrial/model/HourlyElectricity.java         | 101 +--------
 .../java/com/crossover/techtrial/model/Panel.java  | 143 ++-----------
 .../repository/HourlyElectricityRepository.java    |   6 +
 .../service/HourlyElectricityService.java          |   7 +
 .../service/HourlyElectricityServiceImpl.java      |  24 ++-
 .../techtrial/service/PanelServiceImpl.java        |  19 +-
 src/main/resources/application.properties          |   2 +-
 .../resources/db/changelog/db.changelog-1.0.xml    |   0
 .../resources/db/changelog/db.changelog-1.1.xml    |   9 +
 .../resources/db/changelog/db.changelog-master.xml |   1 +
 .../techtrial/controller/PanelControllerITest.java |  61 ++++++
 .../techtrial/controller/PanelControllerTest.java  | 233 ++++++++++++++++++---
 .../converter/DailyElectricityConverterTest.java   |  72 +++++++
 .../service/HourlyElectricityServiceImplTest.java  |  93 ++++++++
 .../techtrial/service/PanelServiceImplTest.java    |  56 +++++
 .../resources/CrossSolar.postman_collection.json   | 119 +++++++++++
 23 files changed, 819 insertions(+), 328 deletions(-)
 mode change 100755 => 100644 gradlew
 create mode 100644 src/main/java/com/crossover/techtrial/bootstrap/AppConfiguration.java
 create mode 100644 src/main/java/com/crossover/techtrial/converter/DailyElectricitiesConverter.java
 mode change 100755 => 100644 src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
 mode change 100755 => 100644 src/main/resources/db/changelog/db.changelog-1.0.xml
 create mode 100644 src/main/resources/db/changelog/db.changelog-1.1.xml
 mode change 100755 => 100644 src/main/resources/db/changelog/db.changelog-master.xml
 create mode 100644 src/test/java/com/crossover/techtrial/controller/PanelControllerITest.java
 create mode 100644 src/test/java/com/crossover/techtrial/converter/DailyElectricityConverterTest.java
 create mode 100644 src/test/java/com/crossover/techtrial/service/HourlyElectricityServiceImplTest.java
 create mode 100644 src/test/java/com/crossover/techtrial/service/PanelServiceImplTest.java
 create mode 100644 src/test/resources/CrossSolar.postman_collection.json

diff --git a/.gitignore b/.gitignore
index 91feb9f..ade41c1 100644
--- a/.gitignore
+++ b/.gitignore
@@ -27,3 +27,4 @@
 /.nb-gradle/
 /.DS_Store
 /bin/
+/.metadata/
diff --git a/gradlew b/gradlew
old mode 100755
new mode 100644
diff --git a/src/main/java/com/crossover/techtrial/bootstrap/AppConfiguration.java b/src/main/java/com/crossover/techtrial/bootstrap/AppConfiguration.java
new file mode 100644
index 0000000..4a495d2
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/bootstrap/AppConfiguration.java
@@ -0,0 +1,32 @@
+package com.crossover.techtrial.bootstrap;
+
+import com.crossover.techtrial.converter.DailyElectricitiesConverter;
+import com.crossover.techtrial.repository.HourlyElectricityRepository;
+import com.crossover.techtrial.repository.PanelRepository;
+import com.crossover.techtrial.service.HourlyElectricityService;
+import com.crossover.techtrial.service.HourlyElectricityServiceImpl;
+import com.crossover.techtrial.service.PanelService;
+import com.crossover.techtrial.service.PanelServiceImpl;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+
+@Configuration
+public class AppConfiguration {
+
+
+    @Bean
+    PanelService panelService(final PanelRepository panelRepository) {
+        return new PanelServiceImpl(panelRepository);
+    }
+
+    @Bean
+    HourlyElectricityService hourlyElectricityService(final HourlyElectricityRepository hourlyElectricityRepository) {
+        return new HourlyElectricityServiceImpl(hourlyElectricityRepository);
+    }
+
+    @Bean
+    DailyElectricitiesConverter dailyElectricitiesConverter() {
+        return new DailyElectricitiesConverter();
+    }
+}
diff --git a/src/main/java/com/crossover/techtrial/controller/PanelController.java b/src/main/java/com/crossover/techtrial/controller/PanelController.java
index d308f18..a72b4cc 100644
--- a/src/main/java/com/crossover/techtrial/controller/PanelController.java
+++ b/src/main/java/com/crossover/techtrial/controller/PanelController.java
@@ -1,22 +1,19 @@
 package com.crossover.techtrial.controller;
 
+import com.crossover.techtrial.converter.DailyElectricitiesConverter;
 import com.crossover.techtrial.dto.DailyElectricity;
 import com.crossover.techtrial.model.HourlyElectricity;
 import com.crossover.techtrial.model.Panel;
 import com.crossover.techtrial.service.HourlyElectricityService;
 import com.crossover.techtrial.service.PanelService;
-import java.util.ArrayList;
-import java.util.List;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 import org.springframework.data.web.PageableDefault;
 import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RestController;
+import org.springframework.web.bind.annotation.*;
+
+import java.time.LocalDateTime;
+import java.util.List;
 
 /**
  * Panel Controller for all Rest APIs related to Panel.
@@ -27,12 +24,18 @@ import org.springframework.web.bind.annotation.RestController;
 @RestController
 public class PanelController {
 
-  @Autowired
-  PanelService panelService;
-  
-  @Autowired
-  HourlyElectricityService hourlyElectricityService;
-  
+  private PanelService panelService;
+  private HourlyElectricityService hourlyElectricityService;
+  private DailyElectricitiesConverter dailyElectricitiesConverter;
+
+  public PanelController(final PanelService panelService,
+                         final HourlyElectricityService hourlyElectricityService,
+                         final DailyElectricitiesConverter dailyElectricitiesConverter) {
+    this.panelService = panelService;
+    this.hourlyElectricityService = hourlyElectricityService;
+    this.dailyElectricitiesConverter = dailyElectricitiesConverter;
+  }
+
   /**
    * Register a Panel to System and start receiving the electricity statistics.
    * @param panel to register.
@@ -55,6 +58,8 @@ public class PanelController {
   public ResponseEntity<?> saveHourlyElectricity(
       @PathVariable(value = "panel-serial") String panelSerial, 
       @RequestBody HourlyElectricity hourlyElectricity) {
+    Panel panel = panelService.findBySerial(panelSerial);
+    hourlyElectricity.setPanel(panel);
     return ResponseEntity.ok(hourlyElectricityService.save(hourlyElectricity));
   }
    
@@ -64,7 +69,7 @@ public class PanelController {
   
   @GetMapping(path = "/api/panels/{panel-serial}/hourly")
   public ResponseEntity<?> hourlyElectricity(
-      @PathVariable(value = "banel-serial") String panelSerial,
+      @PathVariable(value = "panel-serial") String panelSerial,
       @PageableDefault(size = 5,value = 0) Pageable pageable) {
     Panel panel = panelService.findBySerial(panelSerial);
     if (panel == null) {
@@ -81,15 +86,29 @@ public class PanelController {
    * @param panelSerial is unique serial for this Panel.
    * @return
    */
-  
+
   @GetMapping(path = "/api/panels/{panel-serial}/daily")
-  public ResponseEntity<List<DailyElectricity>> allDailyElectricityFromYesterday(
+  public ResponseEntity<List<DailyElectricity>> allDailyElectricityUntilYesterday(
       @PathVariable(value = "panel-serial") String panelSerial) {
-    List<DailyElectricity> dailyElectricityForPanel = new ArrayList<>();
-    /**
-     * IMPLEMENT THE LOGIC HERE and FEEL FREE TO MODIFY OR ADD CODE TO RELATED CLASSES.
-     * MAKE SURE NOT TO CHANGE THE SIGNATURE OF ANY END POINT. NO PAGINATION IS NEEDED HERE.
-     */
+    Panel panel = panelService.findBySerial(panelSerial);
+    if (panel == null) {
+      return ResponseEntity.notFound().build();
+    }
+
+    List<HourlyElectricity> hourlyElectricities = hourlyElectricityService
+        .getHourlyElectricityByPanelIdBetweenDates(panel.getId(), panel.getCreatedAt(), getEndOfYesterdayDate());
+
+    List<DailyElectricity> dailyElectricityForPanel = dailyElectricitiesConverter.convert(hourlyElectricities);
     return ResponseEntity.ok(dailyElectricityForPanel);
   }
+
+    private LocalDateTime getEndOfYesterdayDate() {
+        return LocalDateTime.now()
+            .withHour(0)
+            .withMinute(0)
+            .withSecond(0)
+            .withNano(0)
+            .minusNanos(1);
+    }
+
 }
\ No newline at end of file
diff --git a/src/main/java/com/crossover/techtrial/converter/DailyElectricitiesConverter.java b/src/main/java/com/crossover/techtrial/converter/DailyElectricitiesConverter.java
new file mode 100644
index 0000000..b01346e
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/converter/DailyElectricitiesConverter.java
@@ -0,0 +1,53 @@
+package com.crossover.techtrial.converter;
+
+import com.crossover.techtrial.dto.DailyElectricity;
+import com.crossover.techtrial.model.HourlyElectricity;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import org.springframework.core.convert.converter.Converter;
+
+import java.time.LocalDate;
+import java.util.Comparator;
+import java.util.List;
+import java.util.LongSummaryStatistics;
+import java.util.Map;
+import java.util.stream.Collectors;
+
+public class DailyElectricitiesConverter implements Converter<List<HourlyElectricity>, List<DailyElectricity>> {
+
+    @Override
+    public List<DailyElectricity> convert(final List<HourlyElectricity> hourlyElectricities) {
+        Map<LocalDate, LongSummaryStatistics> dailyElectricityStatistics = aggregateToDailyElectricities(hourlyElectricities);
+        List<DailyElectricity> dailyElectricityForPanel = dailyElectricityStatistics.entrySet().stream()
+            .map(entry -> createDailyElectricity(entry))
+            .sorted(Comparator.comparing(DailyElectricity::getDate))
+            .collect(Collectors.toList());
+        return dailyElectricityForPanel;
+    }
+
+
+    private DailyElectricity createDailyElectricity(Map.Entry<LocalDate, LongSummaryStatistics> entry) {
+        LongSummaryStatistics stat = entry.getValue();
+        return DailyElectricity.builder()
+            .date(entry.getKey())
+            .min(stat.getMin())
+            .max(stat.getMax())
+            .average(stat.getAverage())
+            .sum(stat.getSum())
+            .build();
+    }
+
+
+    private Map<LocalDate, LongSummaryStatistics> aggregateToDailyElectricities(List<HourlyElectricity> hourlyElectricities) {
+        return hourlyElectricities.stream()
+            .map(metric -> new DateValuePair(metric.getReadingAt().toLocalDate(), metric.getGeneratedElectricity()))
+            .collect(Collectors.groupingBy(DateValuePair::getDate, Collectors.summarizingLong(DateValuePair::getValue)));
+    }
+
+    @Getter
+    @AllArgsConstructor
+    private class DateValuePair {
+        private LocalDate date;
+        private Long value;
+    }
+}
diff --git a/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java b/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
index b0e0ea9..5adea96 100644
--- a/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
+++ b/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
@@ -1,5 +1,7 @@
 package com.crossover.techtrial.dto;
 
+import lombok.*;
+
 import java.io.Serializable;
 import java.time.LocalDate;
 
@@ -9,6 +11,10 @@ import java.time.LocalDate;
  *
  */
 
+@Data
+@NoArgsConstructor
+@AllArgsConstructor(access = AccessLevel.PRIVATE)
+@Builder
 public class DailyElectricity implements Serializable {
   
   private static final long serialVersionUID = 3605549122072628877L;
@@ -23,50 +29,4 @@ public class DailyElectricity implements Serializable {
   
   private Long max;
 
-  public LocalDate getDate() {
-    return date;
-  }
-
-  public void setDate(LocalDate date) {
-    this.date = date;
-  }
-
-  public Long getSum() {
-    return sum;
-  }
-
-  public void setSum(Long sum) {
-    this.sum = sum;
-  }
-
-  public Double getAverage() {
-    return average;
-  }
-
-  public void setAverage(Double average) {
-    this.average = average;
-  }
-
-  public Long getMin() {
-    return min;
-  }
-
-  public void setMin(Long min) {
-    this.min = min;
-  }
-
-  public Long getMax() {
-    return max;
-  }
-
-  public void setMax(Long max) {
-    this.max = max;
-  }
-
-  @Override
-  public String toString() {
-    return "DailyElectricity [date=" + date + ", sum=" + sum + ", average="
-        + average + ", min=" + min + ", max=" + max + "]";
-  }
-
 }
diff --git a/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java b/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
old mode 100755
new mode 100644
diff --git a/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java b/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java
index 275f765..4de5653 100644
--- a/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java
+++ b/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java
@@ -1,6 +1,8 @@
 package com.crossover.techtrial.model;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
+import lombok.*;
+
 import java.io.Serializable;
 import java.time.LocalDateTime;
 import javax.persistence.Column;
@@ -22,110 +24,27 @@ import javax.persistence.Table;
 
 @Entity
 @Table(name = "hourly_electricity")
+@Data
+@NoArgsConstructor
+@AllArgsConstructor(access = AccessLevel.PRIVATE)
+@Builder
 public class HourlyElectricity implements Serializable {
 
   private static final long serialVersionUID = -575347909928592140L;
   
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
-  Long id;
+  private Long id;
   
   @JsonIgnore
   @ManyToOne
   @JoinColumn(name = "panel_id", referencedColumnName = "id")
-  Panel panel;
+  private Panel panel;
   
   @Column(name = "generated_electricity")
-  Long generatedElectricity;
+  private Long generatedElectricity;
   
   @Column(name = "reading_at")
-  LocalDateTime readingAt;
-
-  public Long getId() {
-    return id;
-  }
-
-  public void setId(Long id) {
-    this.id = id;
-  }
-
-  public Panel getPanel() {
-    return panel;
-  }
-
-  public void setPanel(Panel panel) {
-    this.panel = panel;
-  }
-
-  public Long getGeneratedElectricity() {
-    return generatedElectricity;
-  }
-
-  public void setGeneratedElectricity(Long generatedElectricity) {
-    this.generatedElectricity = generatedElectricity;
-  }
+  private LocalDateTime readingAt;
 
-  public LocalDateTime getReadingAt() {
-    return readingAt;
-  }
-
-  public void setReadingAt(LocalDateTime readingAt) {
-    this.readingAt = readingAt;
-  }
-
-  /* (non-Javadoc)
-   * @see java.lang.Object#hashCode()
-   */
-  @Override
-  public int hashCode() {
-    final int prime = 31;
-    int result = 1;
-    result = prime * result + ((id == null) ? 0 : id.hashCode());
-    result = prime * result + ((readingAt == null) ? 0 : readingAt.hashCode());
-    return result;
-  }
-
-  /* (non-Javadoc)
-   * @see java.lang.Object#equals(java.lang.Object)
-   */
-  @Override
-  public boolean equals(Object obj) {
-    if (this == obj) {
-      return true;
-    }
-    if (obj == null) {
-      return false;
-    }
-    if (getClass() != obj.getClass()) {
-      return false;
-    }
-    HourlyElectricity other = (HourlyElectricity) obj;
-    if (id == null) {
-      if (other.id != null) {
-        return false;
-      }
-    } else if (!id.equals(other.id)) {
-      return false;
-    }
-    if (readingAt == null) {
-      if (other.readingAt != null) {
-        return false;
-      }
-    } else if (!readingAt.equals(other.readingAt)) {
-      return false;
-    }
-    return true;
-  }
-
-  /* (non-Javadoc)
-   * @see java.lang.Object#toString()
-   */
-  @Override
-  public String toString() {
-    return "HourlyElectricity [id=" + id + ", panel=" + panel + ", generatedElectricity="
-        + generatedElectricity + ", readingAt=" + readingAt + "]";
-  }
-  
-  
-  
 }
diff --git a/src/main/java/com/crossover/techtrial/model/Panel.java b/src/main/java/com/crossover/techtrial/model/Panel.java
index 34fb762..fffad73 100644
--- a/src/main/java/com/crossover/techtrial/model/Panel.java
+++ b/src/main/java/com/crossover/techtrial/model/Panel.java
@@ -1,15 +1,14 @@
 package com.crossover.techtrial.model;
 
-import java.io.Serializable;
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-import javax.persistence.Table;
-import javax.validation.constraints.NotNull;
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import lombok.*;
 import org.springframework.lang.Nullable;
 
+import javax.persistence.*;
+import javax.validation.constraints.NotNull;
+import java.io.Serializable;
+import java.time.LocalDateTime;
+
 /**
  * Panel class hold information related to a Solar panel.
  * 
@@ -18,130 +17,34 @@ import org.springframework.lang.Nullable;
  */
 @Entity
 @Table(name = "panel")
+@Data
+@EqualsAndHashCode(onlyExplicitlyIncluded = true)
+@NoArgsConstructor
+@AllArgsConstructor(access = AccessLevel.PRIVATE)
+@Builder
 public class Panel implements Serializable {
 
   private static final long serialVersionUID = -8527695980909864257L;
 
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
-  Long id;
+  @EqualsAndHashCode.Include
+  private Long id;
 
   @NotNull
-  @Column(name = "serial")
-  String serial;
+  @EqualsAndHashCode.Include
+  private String serial;
 
-  @Column(name = "longitude")
-  Double longitude;
+  private Double longitude;
 
-  @Column(name = "latitude")
-  Double latitude;
+  private Double latitude;
 
   @Nullable
-  @Column(name = "brand")
-  String brand;
-
-  public Long getId() {
-    return id;
-  }
-
-  public void setId(Long id) {
-    this.id = id;
-  }
-
-  public String getSerial() {
-    return serial;
-  }
-
-  public void setSerial(String serial) {
-    this.serial = serial;
-  }
-
-  public Double getLongitude() {
-    return longitude;
-  }
-
-  public void setLongitude(Double longitude) {
-    this.longitude = longitude;
-  }
-
-  public Double getLatitude() {
-    return latitude;
-  }
-
-  public void setLatitude(Double latitude) {
-    this.latitude = latitude;
-  }
-
-  public String getBrand() {
-    return brand;
-  }
-
-  public void setBrand(String brand) {
-    this.brand = brand;
-  }
-
-  /*
-   * Id, Serial and Brand are only fields required to uniquely identify a Panel
-   * 
-   * @see java.lang.Object#hashCode()
-   */
-  @Override
-  public int hashCode() {
-    final int prime = 31;
-    int result = 1;
-    result = prime * result + ((brand == null) ? 0 : brand.hashCode());
-    result = prime * result + ((id == null) ? 0 : id.hashCode());
-    result = prime * result + ((serial == null) ? 0 : serial.hashCode());
-    return result;
-  }
+  @EqualsAndHashCode.Include
+  private String brand;
 
-  /*
-   * Id, Serial and Brand are only fields required to uniquely identify a Panel
-   * 
-   * @see java.lang.Object#equals(java.lang.Object)
-   */
-  @Override
-  public boolean equals(Object obj) {
-    if (this == obj) {
-      return true;
-    }
-    if (obj == null) {
-      return false;
-    }
-    if (getClass() != obj.getClass()) {
-      return false;
-    }
-    Panel other = (Panel) obj;
-    if (brand == null) {
-      if (other.brand != null) {
-        return false;
-      }
-    } else if (!brand.equals(other.brand)) {
-      return false;
-    }
-    if (id == null) {
-      if (other.id != null) {
-        return false;
-      }
-    } else if (!id.equals(other.id)) {
-      return false;
-    }
-    if (serial == null) {
-      if (other.serial != null) {
-        return false;
-      }
-    } else if (!serial.equals(other.serial)) {
-      return false;
-    }
-    return true;
-  }
+  @Column(name = "created_at")
+  @JsonIgnore
+  private LocalDateTime createdAt;
 
-  /* (non-Javadoc)
-   * @see java.lang.Object#toString()
-   */
-  @Override
-  public String toString() {
-    return "Panel [id=" + id + ", serial=" + serial + ", longitude=" + longitude + ", latitude="
-        + latitude + ", brand=" + brand + "]";
-  }
 }
diff --git a/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java b/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
index b883493..61cd783 100644
--- a/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
+++ b/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
@@ -6,6 +6,9 @@ import org.springframework.data.domain.Pageable;
 import org.springframework.data.repository.PagingAndSortingRepository;
 import org.springframework.data.rest.core.annotation.RestResource;
 
+import java.time.LocalDateTime;
+import java.util.List;
+
 /**
  * HourlyElectricity Repository is for all operations for HourlyElectricity.
  * @author Crossover
@@ -13,5 +16,8 @@ import org.springframework.data.rest.core.annotation.RestResource;
 @RestResource(exported = false)
 public interface HourlyElectricityRepository 
     extends PagingAndSortingRepository<HourlyElectricity,Long> {
+
   Page<HourlyElectricity> findAllByPanelIdOrderByReadingAtDesc(Long panelId,Pageable pageable);
+
+  List<HourlyElectricity> findAllByPanelIdAndReadingAtBetweenOrderByReadingAtDesc(Long panelId, LocalDateTime startDate, LocalDateTime endDate);
 }
diff --git a/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java b/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
index 70c40b7..d8fd9ea 100644
--- a/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
+++ b/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
@@ -4,13 +4,20 @@ import com.crossover.techtrial.model.HourlyElectricity;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 
+import java.time.LocalDateTime;
+import java.util.List;
+
 /**
  * HourlyElectricityService interface for all services realted to HourlyElectricity.
  * @author Crossover
  *
  */
 public interface HourlyElectricityService {
+
   HourlyElectricity save(HourlyElectricity hourlyElectricity);
   
   Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable);
+
+  List<HourlyElectricity> getHourlyElectricityByPanelIdBetweenDates(Long panelId, LocalDateTime startDate, LocalDateTime endDate);
+
 }
diff --git a/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java b/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
index 6634e49..229bd95 100644
--- a/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
+++ b/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
@@ -2,11 +2,11 @@ package com.crossover.techtrial.service;
 
 import com.crossover.techtrial.model.HourlyElectricity;
 import com.crossover.techtrial.repository.HourlyElectricityRepository;
-
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
-import org.springframework.stereotype.Service;
+
+import java.time.LocalDateTime;
+import java.util.List;
 
 /**
  * HourlyElectricityServiceImpl will handle electricity generated by a Panel.
@@ -15,11 +15,14 @@ import org.springframework.stereotype.Service;
  *
  */
 
-@Service
 public class HourlyElectricityServiceImpl implements HourlyElectricityService {
-  @Autowired
-  HourlyElectricityRepository hourlyElectricityRepository;
-  
+
+  private final HourlyElectricityRepository hourlyElectricityRepository;
+
+  public HourlyElectricityServiceImpl(final HourlyElectricityRepository hourlyElectricityRepository) {
+    this.hourlyElectricityRepository = hourlyElectricityRepository;
+  }
+
   public HourlyElectricity save(HourlyElectricity hourlyElectricity) {
     return hourlyElectricityRepository.save(hourlyElectricity);
   }
@@ -27,5 +30,10 @@ public class HourlyElectricityServiceImpl implements HourlyElectricityService {
   public Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable) {
     return hourlyElectricityRepository.findAllByPanelIdOrderByReadingAtDesc(panelId, pageable);
   }
-  
+
+  @Override
+  public List<HourlyElectricity> getHourlyElectricityByPanelIdBetweenDates(Long panelId, LocalDateTime startDate, LocalDateTime endDate) {
+      return hourlyElectricityRepository.findAllByPanelIdAndReadingAtBetweenOrderByReadingAtDesc(panelId, startDate, endDate);
+  }
+
 }
\ No newline at end of file
diff --git a/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java b/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
index 48649de..c40a354 100644
--- a/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
+++ b/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
@@ -2,8 +2,8 @@ package com.crossover.techtrial.service;
 
 import com.crossover.techtrial.model.Panel;
 import com.crossover.techtrial.repository.PanelRepository;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Service;
+
+import java.time.LocalDateTime;
 
 
 /**
@@ -11,18 +11,21 @@ import org.springframework.stereotype.Service;
  * @author Crossover
  *
  */
-@Service
 public class PanelServiceImpl implements PanelService {
 
-  @Autowired
-  PanelRepository panelRepository;
-  
+  private final PanelRepository panelRepository;
+
+  public PanelServiceImpl(final PanelRepository panelRepository) {
+    this.panelRepository = panelRepository;
+  }
+
   /* (non-Javadoc)
    * @see com.crossover.techtrial.service.PanelService#register(com.crossover.techtrial.model.Panel)
    */
-  
+
   @Override
-  public void register(Panel panel) { 
+  public void register(Panel panel) {
+    panel.setCreatedAt(LocalDateTime.now());
     panelRepository.save(panel);
   }
   
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
index c7cc890..31f6b78 100644
--- a/src/main/resources/application.properties
+++ b/src/main/resources/application.properties
@@ -2,7 +2,7 @@
 #Database connection Parameters
 spring.datasource.url: jdbc:mysql://localhost:3306/crosssolar?createDatabaseIfNotExist=true&useSSL=false
 spring.datasource.username=root
-spring.datasource.password=
+spring.datasource.password=pwd
 spring.datasource.driver-class-name=com.mysql.jdbc.Driver
 
 spring.jpa.hibernate.ddl-auto=none
diff --git a/src/main/resources/db/changelog/db.changelog-1.0.xml b/src/main/resources/db/changelog/db.changelog-1.0.xml
old mode 100755
new mode 100644
diff --git a/src/main/resources/db/changelog/db.changelog-1.1.xml b/src/main/resources/db/changelog/db.changelog-1.1.xml
new file mode 100644
index 0000000..010fb0a
--- /dev/null
+++ b/src/main/resources/db/changelog/db.changelog-1.1.xml
@@ -0,0 +1,9 @@
+<?xml version="1.1" encoding="UTF-8" standalone="no"?>
+<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">
+     <changeSet author="domahidizoltan" id="1001122005">
+         <comment>Add create time to panel</comment>
+         <addColumn tableName="panel">
+             <column name="created_at" type="datetime" defaultValue="1970-01-01 00:00:00"/>
+         </addColumn>
+     </changeSet>
+</databaseChangeLog>
diff --git a/src/main/resources/db/changelog/db.changelog-master.xml b/src/main/resources/db/changelog/db.changelog-master.xml
old mode 100755
new mode 100644
index ea61ac5..03d177a
--- a/src/main/resources/db/changelog/db.changelog-master.xml
+++ b/src/main/resources/db/changelog/db.changelog-master.xml
@@ -3,4 +3,5 @@
   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd">
   <include file="db/changelog/db.changelog-1.0.xml"/>
+  <include file="db/changelog/db.changelog-1.1.xml"/>
 </databaseChangeLog>
\ No newline at end of file
diff --git a/src/test/java/com/crossover/techtrial/controller/PanelControllerITest.java b/src/test/java/com/crossover/techtrial/controller/PanelControllerITest.java
new file mode 100644
index 0000000..912087c
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/controller/PanelControllerITest.java
@@ -0,0 +1,61 @@
+package com.crossover.techtrial.controller;
+
+import com.crossover.techtrial.model.Panel;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
+import org.springframework.boot.test.web.client.TestRestTemplate;
+import org.springframework.http.HttpEntity;
+import org.springframework.http.HttpHeaders;
+import org.springframework.http.MediaType;
+import org.springframework.http.ResponseEntity;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.web.servlet.MockMvc;
+
+import org.springframework.test.web.servlet.setup.MockMvcBuilders;
+
+
+/**
+ * PanelControllerITest class will test integration of PanelController.java.
+ * @author Crossover
+ *
+ */
+
+@RunWith(SpringJUnit4ClassRunner.class)
+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
+public class PanelControllerITest {
+  
+  MockMvc mockMvc;
+  
+  @Mock
+  private PanelController panelController;
+  
+  @Autowired
+  private TestRestTemplate template;
+
+  @Before
+  public void setup() throws Exception {
+    mockMvc = MockMvcBuilders.standaloneSetup(panelController).build();
+  }
+
+  @Test
+  public void testPanelShouldBeRegistered() throws Exception {
+    HttpEntity<Object> panel = getHttpEntity(
+        "{\"serial\": \"232323\", \"longitude\": \"54.123232\"," 
+            + " \"latitude\": \"54.123232\",\"brand\":\"tesla\" }");
+    ResponseEntity<Panel> response = template.postForEntity(
+        "/api/register", panel, Panel.class);
+    Assert.assertEquals(202,response.getStatusCode().value());
+  }
+
+  private HttpEntity<Object> getHttpEntity(Object body) {
+    HttpHeaders headers = new HttpHeaders();
+    headers.setContentType(MediaType.APPLICATION_JSON);
+    return new HttpEntity<Object>(body, headers);
+  }
+}
diff --git a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
index a1deacf..e0db42b 100644
--- a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
+++ b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
@@ -1,24 +1,44 @@
 package com.crossover.techtrial.controller;
 
+import com.crossover.techtrial.converter.DailyElectricitiesConverter;
+import com.crossover.techtrial.dto.DailyElectricity;
+import com.crossover.techtrial.model.HourlyElectricity;
 import com.crossover.techtrial.model.Panel;
-import org.junit.Assert;
+import com.crossover.techtrial.service.HourlyElectricityService;
+import com.crossover.techtrial.service.PanelService;
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.Mock;
+import org.mockito.Mockito;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
-import org.springframework.boot.test.web.client.TestRestTemplate;
-import org.springframework.http.HttpEntity;
-import org.springframework.http.HttpHeaders;
+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
+import org.springframework.boot.test.mock.mockito.MockBean;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.PageImpl;
+import org.springframework.data.domain.PageRequest;
+import org.springframework.data.domain.Pageable;
+import org.springframework.data.web.config.EnableSpringDataWebSupport;
 import org.springframework.http.MediaType;
-import org.springframework.http.ResponseEntity;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.servlet.MockMvc;
+import org.springframework.test.web.servlet.RequestBuilder;
 
-import org.springframework.test.web.servlet.setup.MockMvcBuilders;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.util.Arrays;
+import java.util.List;
 
+import static org.hamcrest.Matchers.is;
+import static org.mockito.ArgumentMatchers.anyString;
+import static org.mockito.BDDMockito.willReturn;
+import static org.mockito.BDDMockito.willThrow;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
 
 /**
  * PanelControllerTest class will test all APIs in PanelController.java.
@@ -26,36 +46,185 @@ import org.springframework.test.web.servlet.setup.MockMvcBuilders;
  *
  */
 
-@RunWith(SpringJUnit4ClassRunner.class)
-@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
+@RunWith(SpringRunner.class)
+@WebMvcTest
+@EnableSpringDataWebSupport
 public class PanelControllerTest {
-  
-  MockMvc mockMvc;
-  
-  @Mock
-  private PanelController panelController;
-  
+
+  private static final String ANY_SERIAL = "1234567890123456";
+  private static final String HOURLY_ELECTRICITY_URL = "/api/panels/{panel-serial}/hourly";
+  private static final String DAILY_ELECTRICITY_URL = "/api/panels/{panel-serial}/daily";
+  private static final String FIRST_ITEM_QUERY_STRING = "?page=0&size=1";
+  private static final Long ANY_PANEL_ID = 42L;
+  private static final LocalDateTime ANY_CREATED_AT = LocalDateTime.parse("2012-01-15T00:00:00");
+
+  @Autowired
+  private MockMvc mockMvc;
+
   @Autowired
-  private TestRestTemplate template;
+  private ObjectMapper objectMapper;
+
+  @MockBean
+  private PanelService panelServiceMock;
+
+  @MockBean
+  private HourlyElectricityService hourlyElectricityServiceMock;
+
+  @MockBean
+  private DailyElectricitiesConverter dailyElectricitiesConverterMock;
 
   @Before
-  public void setup() throws Exception {
-    mockMvc = MockMvcBuilders.standaloneSetup(panelController).build();
+  public void setUp() {
+    Mockito.reset(panelServiceMock, hourlyElectricityServiceMock);
   }
 
   @Test
-  public void testPanelShouldBeRegistered() throws Exception {
-    HttpEntity<Object> panel = getHttpEntity(
-        "{\"serial\": \"232323\", \"longitude\": \"54.123232\"," 
-            + " \"latitude\": \"54.123232\",\"brand\":\"tesla\" }");
-    ResponseEntity<Panel> response = template.postForEntity(
-        "/api/register", panel, Panel.class);
-    Assert.assertEquals(202,response.getStatusCode().value());
+  public void shouldRegisterPanel() throws Exception {
+    Panel anyPanel = makeAnyPanel();
+    RequestBuilder registerPanelRequest = post("/api/register")
+        .content(asJson(anyPanel))
+        .contentType(MediaType.APPLICATION_JSON);
+
+    mockMvc.perform(registerPanelRequest)
+        .andExpect(status().isAccepted());
+
+    verify(panelServiceMock, times(1)).register(anyPanel);
   }
 
-  private HttpEntity<Object> getHttpEntity(Object body) {
-    HttpHeaders headers = new HttpHeaders();
-    headers.setContentType(MediaType.APPLICATION_JSON);
-    return new HttpEntity<Object>(body, headers);
+  @Test
+  public void shouldSaveHourlyElectricity() throws Exception {
+    HourlyElectricity anyHourlyElectricity = makeAnyHourlyElectricity();
+    HourlyElectricity expectedHourlyElectricity = makeAnyHourlyElectricity();
+    expectedHourlyElectricity.setId(1L);
+    willReturn(makeAnyPanel()).given(panelServiceMock).findBySerial(ANY_SERIAL);
+    willReturn(expectedHourlyElectricity).given(hourlyElectricityServiceMock).save(anyHourlyElectricity);
+    RequestBuilder saveHourlyElectricityRequest = post(HOURLY_ELECTRICITY_URL, ANY_SERIAL)
+        .content(asJson(anyHourlyElectricity))
+        .contentType(MediaType.APPLICATION_JSON);
+
+    mockMvc.perform(saveHourlyElectricityRequest)
+        .andExpect(content().string(asJson(expectedHourlyElectricity)))
+        .andExpect(status().isOk());
   }
+
+  @Test
+  public void shouldGetHourlyElectricity() throws Exception {
+    HourlyElectricity anyHourlyElectricity = makeAnyHourlyElectricity();
+    Page<HourlyElectricity> expectedHourlyElectricitiesPage = makeHourlyElectricitiesPage(anyHourlyElectricity);
+    Pageable firstPage = PageRequest.of(0, 1);
+    willReturn(makeAnyPanel()).given(panelServiceMock).findBySerial(ANY_SERIAL);
+    willReturn(expectedHourlyElectricitiesPage).given(hourlyElectricityServiceMock)
+        .getAllHourlyElectricityByPanelId(ANY_PANEL_ID, firstPage);
+
+    RequestBuilder getHourlyElectricityRequest = get(HOURLY_ELECTRICITY_URL + FIRST_ITEM_QUERY_STRING, ANY_SERIAL);
+
+    mockMvc.perform(getHourlyElectricityRequest)
+        .andExpect(content().string(asJson(expectedHourlyElectricitiesPage)))
+        .andExpect(status().isOk());
+  }
+
+  @Test
+  public void shouldReturnNotFoundWhenHourlyElectricityNotExists() throws Exception {
+    RequestBuilder getHourlyElectricityRequest = get(HOURLY_ELECTRICITY_URL, "non-existing-serial");
+
+    mockMvc.perform(getHourlyElectricityRequest)
+        .andExpect(status().isNotFound());
+  }
+
+  @Test
+  public void requestShouldReturnGeneralErrorMessageOnException() throws Exception {
+    willThrow(RuntimeException.class).given(panelServiceMock).findBySerial(anyString());
+    RequestBuilder getHourlyElectricityRequest = get(HOURLY_ELECTRICITY_URL, ANY_SERIAL);
+
+    mockMvc.perform(getHourlyElectricityRequest)
+        .andExpect(jsonPath("$.message", is("Unable to process this request.")))
+        .andExpect(status().isBadRequest());
+  }
+
+  @Test
+  public void shouldReturnNotFoundWhenPanelNotExistsForDailyElectricityData() throws Exception {
+    RequestBuilder getDailyElectricityRequest = get(DAILY_ELECTRICITY_URL, ANY_SERIAL);
+
+    mockMvc.perform(getDailyElectricityRequest)
+        .andExpect(status().isNotFound());
+  }
+
+  @Test
+  public void shouldReturnListOfDailyElectricitiesUntilYesterday() throws Exception {
+    List<HourlyElectricity> hourlyElectricities = Arrays.asList(
+        makeHourlyElectricity(100L, "2012-02-03T00:00:00"),
+        makeHourlyElectricity(200L, "2012-02-03T08:42:09")
+    );
+    List<DailyElectricity> expectedDailyElectricities = Arrays.asList(
+        makeDailyElectricity("2012-02-03", 100L, 150D, 200L, 300L)
+    );
+
+    willReturn(makeAnyPanel()).given(panelServiceMock).findBySerial(ANY_SERIAL);
+    willReturn(hourlyElectricities).given(hourlyElectricityServiceMock)
+        .getHourlyElectricityByPanelIdBetweenDates(ANY_PANEL_ID, ANY_CREATED_AT, getEndOfYesterdayDate());
+    willReturn(expectedDailyElectricities).given(dailyElectricitiesConverterMock)
+        .convert(hourlyElectricities);
+    RequestBuilder getDailyElectricityRequest = get(DAILY_ELECTRICITY_URL, ANY_SERIAL);
+
+    mockMvc.perform(getDailyElectricityRequest)
+        .andExpect(content().string(asJson(expectedDailyElectricities)))
+        .andExpect(status().isOk());
+  }
+
+  private LocalDateTime getEndOfYesterdayDate() {
+    return LocalDateTime.now()
+        .withHour(0)
+        .withMinute(0)
+        .withSecond(0)
+        .withNano(0)
+        .minusNanos(1);
+  }
+
+  private Page<HourlyElectricity> makeHourlyElectricitiesPage(HourlyElectricity anyHourlyElectricity) {
+    List<HourlyElectricity> hourlyElectricities = Arrays.asList(anyHourlyElectricity);
+    Pageable firstItemPage = PageRequest.of(0, 1);
+    return new PageImpl<>(hourlyElectricities, firstItemPage, 1);
+  }
+
+  private String asJson(Object object) throws JsonProcessingException {
+    return objectMapper.writeValueAsString(object);
+  }
+
+  private Panel makeAnyPanel() {
+    return Panel.builder()
+        .id(ANY_PANEL_ID)
+        .serial(ANY_SERIAL)
+        .brand("anyBrand")
+        .latitude(12.123456)
+        .longitude(23.234567)
+        .createdAt(ANY_CREATED_AT)
+        .build();
+  }
+
+  private HourlyElectricity makeAnyHourlyElectricity() {
+    return HourlyElectricity.builder()
+        .panel(makeAnyPanel())
+        .generatedElectricity(123L)
+        .readingAt(LocalDateTime.now())
+        .build();
+  }
+
+  private HourlyElectricity makeHourlyElectricity(Long electricity, String dateString) {
+    return HourlyElectricity.builder()
+        .generatedElectricity(electricity)
+        .readingAt(LocalDateTime.parse(dateString))
+        .build();
+  }
+
+  private DailyElectricity makeDailyElectricity(String dateString, Long min, Double avg, Long max, Long sum) {
+    return DailyElectricity.builder()
+        .date(LocalDate.parse(dateString))
+        .min(min)
+        .average(avg)
+        .max(max)
+        .sum(sum)
+        .build();
+  }
+
 }
+
diff --git a/src/test/java/com/crossover/techtrial/converter/DailyElectricityConverterTest.java b/src/test/java/com/crossover/techtrial/converter/DailyElectricityConverterTest.java
new file mode 100644
index 0000000..0ee2aeb
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/converter/DailyElectricityConverterTest.java
@@ -0,0 +1,72 @@
+package com.crossover.techtrial.converter;
+
+import com.crossover.techtrial.dto.DailyElectricity;
+import com.crossover.techtrial.model.HourlyElectricity;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.test.context.junit4.SpringRunner;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+@RunWith(SpringRunner.class)
+public class DailyElectricityConverterTest {
+
+    private DailyElectricitiesConverter underTest;
+
+    @Before
+    public void setUp() {
+        underTest = new DailyElectricitiesConverter();
+    }
+
+    @Test
+    public void shouldReturnEmptyListWhenHourlyElectricityDataIsEmpty() {
+        List<DailyElectricity> actualDailyElectricities = underTest.convert(new ArrayList<>());
+        assertTrue(actualDailyElectricities.isEmpty());
+    }
+
+    @Test
+    public void shouldConvertListToDailyElectricities() {
+        List<HourlyElectricity> hourlyElectricities = Arrays.asList(
+            makeHourlyElectricity(100L, "2012-02-03T00:00:00"),
+            makeHourlyElectricity(200L, "2012-02-03T08:42:09"),
+            makeHourlyElectricity(200L, "2012-02-03T23:59:59"),
+            makeHourlyElectricity(12L, "2014-11-17T13:12:35"),
+            makeHourlyElectricity(1000L, "2018-06-30T02:45:12"),
+            makeHourlyElectricity(1200L, "2018-06-30T22:22:22")
+        );
+        List<DailyElectricity> expectedDailyElectricities = Arrays.asList(
+            makeDailyElectricity("2012-02-03", 100L, 166.66666666666666D, 200L, 500L),
+            makeDailyElectricity("2014-11-17", 12L, 12D, 12L, 12L),
+            makeDailyElectricity("2018-06-30", 1000L, 1100D, 1200L, 2200L)
+        );
+
+        List<DailyElectricity> actualDailyElectricities = underTest.convert(hourlyElectricities);
+        assertEquals(actualDailyElectricities, expectedDailyElectricities);
+    }
+
+    private HourlyElectricity makeHourlyElectricity(Long electricity, String dateString) {
+        return HourlyElectricity.builder()
+            .generatedElectricity(electricity)
+            .readingAt(LocalDateTime.parse(dateString))
+            .build();
+    }
+
+    private DailyElectricity makeDailyElectricity(String dateString, Long min, Double avg, Long max, Long sum) {
+        return DailyElectricity.builder()
+            .date(LocalDate.parse(dateString))
+            .min(min)
+            .average(avg)
+            .max(max)
+            .sum(sum)
+            .build();
+    }
+
+}
diff --git a/src/test/java/com/crossover/techtrial/service/HourlyElectricityServiceImplTest.java b/src/test/java/com/crossover/techtrial/service/HourlyElectricityServiceImplTest.java
new file mode 100644
index 0000000..3745911
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/service/HourlyElectricityServiceImplTest.java
@@ -0,0 +1,93 @@
+package com.crossover.techtrial.service;
+
+
+import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.repository.HourlyElectricityRepository;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.boot.test.mock.mockito.MockBean;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.PageImpl;
+import org.springframework.data.domain.PageRequest;
+import org.springframework.test.context.junit4.SpringRunner;
+
+import java.time.LocalDateTime;
+import java.util.Arrays;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.BDDMockito.given;
+
+@RunWith(SpringRunner.class)
+public class HourlyElectricityServiceImplTest {
+
+    private static final Long ANY_PANEL_ID = 42L;
+    private static final LocalDateTime ANY_CREATED_AT = LocalDateTime.parse("1970-01-01T00:00:00");
+    private static final LocalDateTime NOW = LocalDateTime.now();
+
+    private HourlyElectricity anyHourlyElectricity;
+
+    @MockBean
+    private HourlyElectricityRepository hourlyElectricityRepositoryMock;
+
+    private HourlyElectricityService underTest;
+
+    @Before
+    public void setUp() {
+        underTest = new HourlyElectricityServiceImpl(hourlyElectricityRepositoryMock);
+        anyHourlyElectricity = makeAnyHourlyElectricity();
+    }
+
+    @Test
+    public void shouldSaveHourlyElectricity() {
+        HourlyElectricity expectedHourlyElectricity = makeAnyHourlyElectricity();
+        expectedHourlyElectricity.setId(1L);
+        given(hourlyElectricityRepositoryMock.save(anyHourlyElectricity)).willReturn(expectedHourlyElectricity);
+
+        HourlyElectricity actualHourlyElectricity = underTest.save(anyHourlyElectricity);
+
+        assertEquals(expectedHourlyElectricity, actualHourlyElectricity);
+    }
+
+    @Test
+    public void shouldGetAllHourlyElectricityByPanelId() {
+        PageRequest pageable = PageRequest.of(1, 2);
+        List<HourlyElectricity> hourlyElectricities = Arrays.asList(anyHourlyElectricity);
+        Page<HourlyElectricity> expectedHourlyElectricityPage = new PageImpl(hourlyElectricities, pageable, 2);
+        given(hourlyElectricityRepositoryMock.findAllByPanelIdOrderByReadingAtDesc(ANY_PANEL_ID, pageable))
+            .willReturn(expectedHourlyElectricityPage);
+
+        Page<HourlyElectricity> actualHourlyElectricityPage = underTest.getAllHourlyElectricityByPanelId(ANY_PANEL_ID, pageable);
+
+        assertEquals(expectedHourlyElectricityPage, actualHourlyElectricityPage);
+    }
+
+    @Test
+    public void shouldGetHourlyElectricityByPanelIdBetweenDates() {
+        List<HourlyElectricity> expectedHourlyElectricities = Arrays.asList(makeAnyHourlyElectricity());
+        given(hourlyElectricityRepositoryMock.findAllByPanelIdAndReadingAtBetweenOrderByReadingAtDesc(ANY_PANEL_ID, ANY_CREATED_AT, NOW))
+            .willReturn(expectedHourlyElectricities);
+
+        List<HourlyElectricity> actualHourlyElectricities = underTest.getHourlyElectricityByPanelIdBetweenDates(ANY_PANEL_ID, ANY_CREATED_AT, NOW);
+
+        assertEquals(expectedHourlyElectricities, actualHourlyElectricities);
+    }
+
+    private HourlyElectricity makeAnyHourlyElectricity() {
+        return HourlyElectricity.builder()
+            .panel(makeAnyPanel())
+            .generatedElectricity(123L)
+            .readingAt(LocalDateTime.now())
+            .build();
+    }
+
+    private Panel makeAnyPanel() {
+        return Panel.builder()
+            .id(ANY_PANEL_ID)
+            .serial("1234567890123456")
+            .createdAt(ANY_CREATED_AT)
+            .build();
+    }
+}
diff --git a/src/test/java/com/crossover/techtrial/service/PanelServiceImplTest.java b/src/test/java/com/crossover/techtrial/service/PanelServiceImplTest.java
new file mode 100644
index 0000000..e8e5f9c
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/service/PanelServiceImplTest.java
@@ -0,0 +1,56 @@
+package com.crossover.techtrial.service;
+
+
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.repository.PanelRepository;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.boot.test.mock.mockito.MockBean;
+import org.springframework.test.context.junit4.SpringRunner;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.BDDMockito.given;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SpringRunner.class)
+public class PanelServiceImplTest {
+
+    private static final String ANY_SERIAL = "1234567890123456";
+
+    private Panel anyPanel;
+
+    @MockBean
+    private PanelRepository panelRepositoryMock;
+
+    private PanelService underTest;
+
+    @Before
+    public void setUp() {
+        underTest = new PanelServiceImpl(panelRepositoryMock);
+        anyPanel = makeAnyPanel();
+    }
+
+    @Test
+    public void shouldRegisterPanel() {
+        underTest.register(anyPanel);
+        verify(panelRepositoryMock, times(1)).save(anyPanel);
+    }
+
+    @Test
+    public void shouldFindBySerial() {
+        given(panelRepositoryMock.findBySerial(ANY_SERIAL)).willReturn(anyPanel);
+        Panel actualPanel = underTest.findBySerial(ANY_SERIAL);
+        assertEquals(anyPanel, actualPanel);
+    }
+
+    private Panel makeAnyPanel() {
+       return Panel.builder()
+            .serial(ANY_SERIAL)
+            .brand("anyBrand")
+            .latitude(12.123456)
+            .longitude(23.234567)
+            .build();
+    }
+}
diff --git a/src/test/resources/CrossSolar.postman_collection.json b/src/test/resources/CrossSolar.postman_collection.json
new file mode 100644
index 0000000..11f6c5a
--- /dev/null
+++ b/src/test/resources/CrossSolar.postman_collection.json
@@ -0,0 +1,119 @@
+{
+	"variables": [],
+	"info": {
+		"name": "CrossSolar",
+		"_postman_id": "09d9cf79-b846-be06-89e0-5f54d745202f",
+		"description": "",
+		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
+	},
+	"item": [
+		{
+			"name": "register-panel",
+			"request": {
+				"url": "http://localhost:8080/api/register",
+				"method": "POST",
+				"header": [
+					{
+						"key": "Content-Type",
+						"value": "application/json",
+						"description": ""
+					}
+				],
+				"body": {
+					"mode": "raw",
+					"raw": "{\n\t\"serial\": \"1122334455667788\",\n\t\"latitude\": 12.123456,\n\t\"longitude\": 23.234567,\n\t\"brand\": \"any-brand\"\n}"
+				},
+				"description": ""
+			},
+			"response": []
+		},
+		{
+			"name": "save-hourly-electricity",
+			"request": {
+				"url": "http://localhost:8080/api/panels/1122334455667788/hourly",
+				"method": "POST",
+				"header": [
+					{
+						"key": "Content-Type",
+						"value": "application/json",
+						"description": ""
+					}
+				],
+				"body": {
+					"mode": "raw",
+					"raw": "{\n\t\"generatedElectricity\": 222,\n\t\"readingAt\": \"2018-06-27T18:43:00\"\n}"
+				},
+				"description": ""
+			},
+			"response": []
+		},
+		{
+			"name": "get-hourly-electricity",
+			"request": {
+				"url": {
+					"raw": "http://localhost:8080/api/panels/1122334455667788/hourly?page=0&size=3",
+					"protocol": "http",
+					"host": [
+						"localhost"
+					],
+					"port": "8080",
+					"path": [
+						"api",
+						"panels",
+						"1122334455667788",
+						"hourly"
+					],
+					"query": [
+						{
+							"key": "page",
+							"value": "0",
+							"equals": true,
+							"description": ""
+						},
+						{
+							"key": "size",
+							"value": "3",
+							"equals": true,
+							"description": ""
+						}
+					],
+					"variable": []
+				},
+				"method": "GET",
+				"header": [
+					{
+						"key": "Content-Type",
+						"value": "application/json",
+						"description": ""
+					}
+				],
+				"body": {
+					"mode": "raw",
+					"raw": "{\n\t\"generatedElectricity\": 222,\n\t\"readingAt\": \"2018-06-27T18:43:00\"\n}"
+				},
+				"description": ""
+			},
+			"response": []
+		},
+		{
+			"name": "get-daily-electricity",
+			"request": {
+				"url": "http://localhost:8080/api/panels/1122334455667788/daily",
+				"method": "GET",
+				"header": [
+					{
+						"key": "Content-Type",
+						"value": "application/json",
+						"description": ""
+					}
+				],
+				"body": {
+					"mode": "raw",
+					"raw": "{\n\t\"generatedElectricity\": 222,\n\t\"readingAt\": \"2018-06-27T18:43:00\"\n}"
+				},
+				"description": ""
+			},
+			"response": []
+		}
+	]
+}
\ No newline at end of file
-- 
2.16.2.windows.1

